<html>
<head>
<title>The Guide</title>
<link rel="stylesheet" type="text/css" href="../guide.css">
<script language="javascript" src="../guide.js"></script>
</head>
<body>
<script language="javascript">top("Variables","Absolute Addressing");</script>

<p>We already went over previously how the TI86 switches in and out
<a href="../intermediate/memo.htm">ROM and RAM Pages</a> so you can look back
at that if you want to refresh yourself real quick.  Here is a chart that
tells the equivalents of the Absolute Address Pointer (ABS) to the RAM Page
with an 16 bit address (addressing using the register pairs: <i>de</i>,
<i>bc</i>, <i>hl</i>, and <i>ix</i>).

<p><table align="center" class="info">
	<tr class="header">
		<td>ABS
		<td>RAM Page
		<td>16 Bit Address
	<tr>	<td class=header>$0c000 to $0ffff
		<td>0
		<td>$c000 to $ffff
	<tr>	<td class=header>$10000 to $13fff
		<td>1
		<td>$8000 to $bfff
	<tr>	<td class=header>$14000 to $17fff
		<td>2
		<td>$8000 to $bfff
	<tr>	<td class=header>$18000 to $1bfff
		<td>3
		<td>$8000 to $bfff
	<tr>	<td class=header>$1c000 to $1ffff
		<td>4
		<td>$8000 to $bfff
	<tr>	<td class=header>$20000 to $23fff
		<td>5
		<td>$8000 to $bfff
	<tr>	<td class=header>$24000 to $27fff
		<td>6
		<td>$8000 to $bfff	
	<tr>	<td class=header>$28000 to $2bfff
		<td>7
		<td>$8000 to $bfff
</table>

<p>You don't really have to know this table.  It really isn't helpful in a
program or anything.  I just thought I'd copy it down for you.  It's
basically just to illustrate how the TI86's system of 24 bit (<i>ahl</i>
or <i>bde</i>, absolute pointers) can be converted to a 16 bit (<i>hl</i>,
<i>bc</i>, <i>de</i>, or <i>ix</i>, register pair pointers).  The TI86's
own routines deal with this mainly.  One call that converts ABS <i>ahl</i>
into a RAM Page and a 16 bit address is _Load_RAM_ahl.

<ul>
	<li><a href="#_load_ram_ahl">_Load_RAM_ahl</a>
	<li><a href="#_Set_ABS_Src_Addr">_Set_ABS_Src_Addr</a>
	<li><a href="#_Set_ABS_Dest_Addr">_Set_ABS_Dest_Addr</a>
	<li><a href="#_Set_MM_Num_Bytes">_Set_MM_Num_Bytes</a>
	<li><a href="#_MM_Ldir">_MM_Ldir</a>
	<li><a href="#_ABS_Mov10toOP1_NoSet">_ABS_Mov10toOP1_NoSet</a>
	<li><a href="#_ABS_Mov10B">_ABS_Mov10B</a>
	<li><a href="#_ABS_MovFrOP1">_ABS_MovFrOP1</a>
	<li><a href="#_DataSize">_DataSize</a>
	<li><a href="#_Inc_Ptr_ahl">_Inc_Ptr_ahl</a>
	<li><a href="#_Inc_Ptr_ade">_Inc_Ptr_ade</a>
	<li><a href="#_Inc_Ptr_bde">_Inc_Ptr_bde</a>
	<li><a href="#_Dec_Ptr_ahl">_Dec_Ptr_ahl</a>
	<li><a href="#_Dec_Ptr_ade">_Dec_Ptr_ade</a>
	<li><a href="#_Dec_Ptr_bde">_Dec_Ptr_bde</a>
	<li><a href="#_GetB_AHL">_GetB_AHL</a>
	<li><a href="#_RAM_Page_1">_RAM_Page_1</a>
	<li><a href="#_RAM_Page_7">_RAM_Page_7</a>
	<li><a href="#_WriteB_Inc_ahl">_WriteB_Inc_ahl</a>
	<li><a href="#_Cp_ahl_bde">_Cp_ahl_bde</a>
	<li><a href="#_Ex_ahl_bde">_Ex_ahl_bde</a>
	<li><a href="#_Get_Word_ahl">_Get_Word_ahl</a>
	<li><a href="#_Set_Word_ahl">_Set_Word_ahl</a>
	<li><a href="#_ahl_Plus_2_Pg3">_ahl_Plus_2_Pg3</a>
</ul>

<a name="_load_ram_ahl"><h3>_Load_RAM_ahl=$462f</h3>
<table align="center" class="function">
	<tr>	<td class=header class=header width="15%">Description
		<td>Converts ABS pointer <i>ahl</i> into RAM page and <i>hl</i> as
		pointer
	<tr>	<td class=header>Input
		<td><i>ahl</i> - ABS pointer (24 bit)
	<tr>	<td class=header>Destroys
		<td><i>a</i> and <i>h</i>
	<tr>	<td class=header>Output
		<td>appropriate RAM page loaded<br>
		<i>hl</i> - address on that page according to <i>ahl</i>
</table>

<p>Here are some other helpful ABS Pointer routines.  They're in no real
order.  When you're using these
routines, they are not defined in the regular "ti86asm.inc".  You'll have to
add the following at the start of your program:

<pre>#include "ti86abs.inc"</pre>

<a name="_Set_ABS_Src_Addr"><h3>_Set_ABS_Src_Addr=$4647</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Copies <i>ahl</i> into _Abs_Src_Addr for use with block copies
	
	<tr>
		<td>Input
		<td><i>ahl</i> is ABS pointer
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td><i>ahl</i> is stored in _Abs_Src_Addr for use with block
		copies
	
</table>

<a name="_Set_ABS_Dest_Addr"><h3>_Set_ABS_Dest_Addr=$5285</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Copies <i>ahl</i> into <code>_Abs_Dest_Addr</code> for use
		with block copies
	
	<tr>
		<td>Input
		<td><i>ahl</i> is ABS pointer
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td><i>ahl</i> is stored in <code>_Abs_Dest_Addr</code> for use
		with block copies
	
</table>

<a name="_Set_MM_Num_Bytes"><h3>_Set_MM_Num_Bytes=$464f</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Sets number of bytes to be copied in ABS block copies
	
	<tr>
		<td>Input
		<td><i>ahl</i> is ABS pointer
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td><i>ahl</i> is stored in <code>_MM_Num_Bytes</code>
		for use with block copies
	
</table>

<a name="_MM_Ldir"><h3>_MM_Ldir=$52ed</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Performs ABS pointer block copy like <code>ldir</code>
	
	<tr>
		<td>Input
		<td><code>ABS_Src_Addr</code> - source to copy from<br>
		<code>ABS_Dest_Addr</code> - destination to copy to<br>
		<code>MM_Num_Bytes</code> - number of bytes to copy<br>
		Note: These are all setup using
		<a href="#src">_Set_ABS_Src_Addr</a>,
		<a href="#dest">_Set_ABS_Dest_Addr</a>, and
		<a href="#num">_Set_MM_Num_Bytes</a>.
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td><code>Abs_Src_Addr</code>, <code>Abs_Dest_Addr</code>,
		<code>mm_num_bytes</code> - modified just like
		<code>ldir</code> does in 16 bit block copies
	
</table>

<a name="_ABS_Mov10toOP1_NoSet"><h3>_ABS_Mov10toOP1_NoSet=$5239</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Copy 10 bytes from ABS pointer in <code>_ABS_Src_Addr</code>
		to <code>OP1</code>
	
	<tr>
		<td>Input
		<td><code>Abs_Src_Addr</code> - ABS pointer of where to copy from
	
	<tr>
		<td>Destroys
		<td><i>a</i> and <i>hl</i>
	
	<tr>
		<td>Output
		<td>OP1 - a copy of the 10 bytes starting at
		<code>Abs_Src_Addr</code>
	
</table>

<a name="_ABS_Mov10B"><h3>_ABS_Mov10B=$5249</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Move 10 bytes from ABS pointer in <code>_Abs_Src_Addr</code>
		to ABS pointer in <code>_Abs_Dest_Addr</code>
	
	<tr>
		<td>Input
		<td><code>Abs_Src_Addr</code> - ABS pointer of where to copy from
	
	<tr>
		<td>Destroys
		<td><i>a</i> and <i>hl</i>
	
	<tr>
		<td>Output
		<td><code>Abs_Dest_Addr</code> - ABS pointer of where 10
		bytes copied to
	
</table>

<a name="_ABS_MovFrOP1"><h3>_ABS_MovFrOP1=$5245</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Move 10 bytes from <code>OP1</code> to the ABS pointer
		in <code>_Abs_Dest_Addr</code>
	
	<tr>
		<td>Input
		<td>ABS pointer in <code>_Abs_Dest_Addr</code> where to copy to<br>
		<code>OP1</code> - 10 bytes to copy
	
	<tr>
		<td>Destroys
		<td><i>a</i> and <i>hl</i>
	
	<tr>
		<td>Output
		<td>ABS pointer in <code>_Abs_Dest_Addr</code> where copied to
	
</table>

<a name="_DataSize"><h3>_DataSize=$477f</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>After performing <a href="_fin.htm">_FindSym</a>, use
		it to find the variable's size.
	
	<tr>
		<td>Input
		<td>The output of <a href="_fin.htm">_FindSym</a>
		(like _Delvar=$475f).
	
	<tr>
		<td>Destroys
		<td><i>a, bc, de</i>, and <i>hl</i>
	
	<tr>
		<td>Output
		<td><i>c</i> - <a href="vari.htm#type">variable type</a><br>
		<i>de</i> - size of variable's data<br>
		carry cleared
	
</table>

<a name="_Inc_Ptr_ahl"><h3>_Inc_Ptr_ahl=$4637</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Increase the ABS pointer <i>ahl</i>
	
	<tr>
		<td>Input
		<td><i>ahl</i> - the ABS pointer to increase
	
	<tr>
		<td>Destroys
		<td><i>ahl</i> (always <i>l</i>, sometimes <i>h</i>, rarely
		<i>a</i>)
	
	<tr>
		<td>Output
		<td><i>ahl</i> = <i>ahl</i> + 1
	
</table>

<a name="_Inc_Ptr_ade"><h3>_Inc_Ptr_ade=$45ef</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Increase the ABS pointer <i>ade</i>
	
	<tr>
		<td>Input
		<td><i>ade</i> - the ABS pointer to increase
	
	<tr>
		<td>Destroys
		<td><i>ade</i> (always <i>e</i>, sometimes <i>d</i>, rarely
		<i>a</i>)
	
	<tr>
		<td>Output
		<td><i>ade</i> = <i>ade</i> + 1
	
</table>

<a name="_Inc_Ptr_bde"><h3>_Inc_Ptr_bde=$463F</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Increase the ABS pointer <i>bde</i>
	
	<tr>
		<td>Input
		<td><i>bde</i> - the ABS pointer to increase
	
	<tr>
		<td>Destroys
		<td><i>bde</i> (always <i>e</i>, sometimes <i>d</i>, rarely
		<i>b</i>)
	
	<tr>
		<td>Output
		<td><i>bde</i> = <i>bde</i> + 1
	
</table>

<a name="_Dec_Ptr_ahl"><h3>_Dec_Ptr_ahl=$463b</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Decrease the ABS pointer <i>ahl</i>
	
	<tr>
		<td>Input
		<td><i>ahl</i> - the ABS pointer to decrease
	
	<tr>
		<td>Destroys
		<td><i>ahl</i> (always <i>l</i>, sometimes <i>h</i>, rarely
		<i>a</i>)
	
	<tr>
		<td>Output
		<td><i>ahl</i> = <i>ahl</i> - 1
	
</table>

<a name="_Dec_Ptr_ade"><h3>_Dec_Ptr_ade=$46bf</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Decrease the ABS pointer <i>ade</i>
	
	<tr>
		<td>Input
		<td><i>ade</i> - the ABS pointer to decrease
	
	<tr>
		<td>Destroys
		<td><i>ade</i> (always <i>e</i>, sometimes <i>d</i>, rarely
		<i>a</i>)
	
	<tr>
		<td>Output
		<td><i>ade</i> = <i>ade</i> - 1
	
</table>

<a name="_Dec_Ptr_bde"><h3>_Dec_Ptr_bde=$4643</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Decrease the ABS pointer <i>ade</i>
	
	<tr>
		<td>Input
		<td><i>ade</i> - the ABS pointer to decrease
	
	<tr>
		<td>Destroys
		<td><i>ade</i> (always <i>e</i>, sometimes <i>d</i>, rarely
		<i>a</i>)
	
	<tr>
		<td>Output
		<td><i>ade</i> = <i>ade</i> - 1
	
</table>

<a name="_GetB_AHL"><h3>_GetB_AHL=$46c3</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Gets the byte at ABS <i>ahl</i>
	
	<tr>
		<td>Input
		<td><i>ahl</i> - where to get byte from
	
	<tr>
		<td>Destroys
		<td><i>a</i> and <i>hl</i>
	
	<tr>
		<td>Output
		<td><i>a</i> - byte at ABS <i>ahl</i><br>
		<i>hl</i> - converted <i>ahl</i> to 16 bit address
		<i>hl</i> and correct <a href="../intermediate/memo.htm">RAM
		page swapped</a>
	
</table>

<a name="_RAM_Page_1"><h3>_RAM_Page_1=$47e3</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Loads RAM page 1 (<a href="floa.htm">Floating
		Point Stack</a>)
	
	<tr>
		<td>Input
		<td>none
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td>RAM Page 1 <a href="../intermediate/memo.htm">swapped in</a>
	
</table>

<a name="_RAM_Page_7"><h3>_RAM_Page_7=$47f3</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Loads RAM page 7 (Variable Allocation Table)
	
	<tr>
		<td>Input
		<td>none
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td>RAM Page 7 <a href="../intermediate/memo.htm">swapped in</a>
	
</table>

<a name="_WriteB_Inc_ahl"><h3>_WriteB_Inc_ahl=$5567</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Store a byte at ABS <i>ahl</i>
	
	<tr>
		<td>Input
		<td><i>c</i> - the byte to store<br><i>ahl</i> - the ABS pointer
		to where to store to
	
	<tr>
		<td>Destroys
		<td><i>ahl</i> is incremented just like
		<a href="#iahl"><code>_Inc_Ptr_ahl</code></a>
	
	<tr>
		<td>Output
		<td><i>c</i> is stored at <i>ahl</i><br>
		<i>ahl</i> = <i>ahl</i> + 1
	
</table>

<a name="_Cp_ahl_bde"><h3>_Cp_ahl_bde=$46c7</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Compare the bytes at <i>ahl</i> and <i>bde</i> much
		like <a href="../beginner/inst.htm#cp"><code>cp</code></a>.
	
	<tr>
		<td>Input
		<td><i>ahl</i> and <i>bde</i> are ABS pointers to the
		byte being checked
	
	<tr>
		<td>Destroys
		<td>none
	
	<tr>
		<td>Output
		<td><a href="../beginner/flag.htm">Flags</a> set accordingly
	
</table>

<a name="_Ex_ahl_bde"><h3>_Ex_ahl_bde=$45f3</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Exchange the ABS pointers <i>ahl</i> and <i>bde</i> much
		like <code>ex de,hl</code>
	
	<tr>
		<td>Input
		<td><i>ahl</i> and <i>bde</i> are the ABS addresses to be
		swapped around.
	
	<tr>
		<td>Destroys
		<td><i>ahl</i> now is <i>bde</i><br>
		<i>bde</i> is now <i>ahl</i>
	
	<tr>
		<td>Output
		<td><i>ahl</i> now is <i>bde</i><br>
		<i>bde</i> is now <i>ahl</i>
	
</table>

<a name="_Get_Word_ahl"><h3>_Get_Word_ahl=$521d</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Get the word at ABS <i>ahl</i>
	
	<tr>
		<td>Input
		<td><i>ahl</i> - where to get the two bytes from
	
	<tr>
		<td>Destroys
		<td><i>de</i> and <i>ahl</i>
	
	<tr>
		<td>Output
		<td><i>de</i> = (<i>ahl</i>)<br>
		<i>ahl</i> = <i>ahl</i> + 2
	
</table>

<a name="_Set_Word_ahl"><h3>_Set_Word_ahl=$5221</h3>
<table align="center" class="function">
	<tr>
		<td class=header width="15%">Description
		<td>Load <i>de</i> into memory at <i>ahl</i>
	<tr>
		<td>Input
		<td><i>ahl</i> - where to set the two bytes
	<tr>
		<td>Destroys
		<td><i>ahl</i>
	<tr>
		<td>Output
		<td>(<i>ahl</i>) = <i>de</i><br>
		<i>ahl</i> = <i>ahl</i> + 2
</table>

<a name="_ahl_Plus_2_Pg3"><h3>_ahl_Plus_2_Pg3=$4c3f</h3>
<table align="center" class=function>
	<tr>	<td class=header width="15%">Description
		<td>Increments <i>ahl</i> twice
	<tr>	<td class=header>Input
		<td><i>ahl</i> - address to increment
	<tr>	<td class=header>Destroys
		<td><i>ahl</i> is always two more
	<tr>	<td class=header>Output
		<td><i>ahl</i> = <i>ahl</i> + 2
</table>




<p><a href="../index.html#vari">Index</a>
<script language="JavaScript">bottom();</script>
